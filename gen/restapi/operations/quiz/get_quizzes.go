// Code generated by go-swagger; DO NOT EDIT.

package quiz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetQuizzesHandlerFunc turns a function with the right signature into a get quizzes handler
type GetQuizzesHandlerFunc func(GetQuizzesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetQuizzesHandlerFunc) Handle(params GetQuizzesParams) middleware.Responder {
	return fn(params)
}

// GetQuizzesHandler interface for that can handle valid get quizzes params
type GetQuizzesHandler interface {
	Handle(GetQuizzesParams) middleware.Responder
}

// NewGetQuizzes creates a new http.Handler for the get quizzes operation
func NewGetQuizzes(ctx *middleware.Context, handler GetQuizzesHandler) *GetQuizzes {
	return &GetQuizzes{Context: ctx, Handler: handler}
}

/*GetQuizzes swagger:route GET /v1/quizzes quiz getQuizzes

Returns a list of quizzes.

Optional extended description in Markdown.

*/
type GetQuizzes struct {
	Context *middleware.Context
	Handler GetQuizzesHandler
}

func (o *GetQuizzes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetQuizzesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
