// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuizQuestion quiz question
// swagger:model quizQuestion
type QuizQuestion struct {

	// answers
	// Required: true
	Answers []string `json:"answers"`

	// correct answer idx
	// Required: true
	CorrectAnswerIdx *int32 `json:"correct_answer_idx"`

	// id
	// Required: true
	ID *string `json:"id"`

	// question
	// Required: true
	Question *string `json:"question"`
}

// Validate validates this quiz question
func (m *QuizQuestion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorrectAnswerIdx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuizQuestion) validateAnswers(formats strfmt.Registry) error {

	if err := validate.Required("answers", "body", m.Answers); err != nil {
		return err
	}

	return nil
}

func (m *QuizQuestion) validateCorrectAnswerIdx(formats strfmt.Registry) error {

	if err := validate.Required("correct_answer_idx", "body", m.CorrectAnswerIdx); err != nil {
		return err
	}

	return nil
}

func (m *QuizQuestion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *QuizQuestion) validateQuestion(formats strfmt.Registry) error {

	if err := validate.Required("question", "body", m.Question); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuizQuestion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuizQuestion) UnmarshalBinary(b []byte) error {
	var res QuizQuestion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
